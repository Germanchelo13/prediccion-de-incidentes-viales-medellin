fluidRow(style='height:5vh'),
menuItem("Problematica", tabName="intro", icon=icon("users")),
menuItem(text= "Accidentes 2021 2022",tabName = "series",icon = icon("chart-line")),
menuItem(text= "Accidentes Barrios",tabName = "map",icon = icon("earth-americas"))
)  ),
# itmes
dashboardBody(tabItems (
# mapa
tabItem(tabName="map",
tabBox(id="t3",width= 12,
# puntos universidades
tabPanel(title="Información por barrio",
icon=icon('map'),
fluidPage(
fluidRow( uiOutput("text_geo") ),
fluidRow(column(6,
selectInput(inputId ="cluster" ,label= "Seleccione el cluster",
choices =c("Grupo 1","Grupo 2"),multiple = TRUE)),
column(6, selectInput(inputId ="estado" ,label= "Seleccione una Variable",
choices =c("Accidentes 2019", "Accidentes 2020"),multiple = TRUE) ) )
))
)),
tabItem(tabName = 'series',
tabBox(id='t3',width= 12,tabPanel(
HTML('<i class="fa-duotone fa-chart-scatter"></i>Numeric'),icon=icon('chart-line'),
fluidPage( fluidRow( br(),
selectInput(inputId ="var_numeric"
, label = "Select variable"
, choices =c("1","2") ),
uiOutput('descripcion_numerica'),
plotlyOutput('serie_plot'), br(),br()
)
)
)
)),
# item descripcion
tabItem(tabName = 'intro',fluidRow(style='height:5vh'),
tabBox(id='t3',width=12,tabPanel(HTML('<i class="fa-solid fa-book"></i> Contexto'),
fluidPage(
fluidRow(uiOutput('intro_'))
))) )
)
)
)
)
servidor<-function(input, output) {
output$text_geo<-renderUI({
"Se cuenta con 320 barrios en la ciudad de Medellín,
selecciona variables y cluster que te interesen." })
output$intro_<-renderUI({
HTML("
<br><h2>Accidentes viales en Medellín</h6>
</br>
¿Se ha preguntado como es el comportamiento de los accidentes en la ciudad de Medellín?
En esta aplicación puede interactuar con la información desde el año 2015 y 2022,
también puedes analizar la información por barrio.
<iframe width='560' height='315' src='https://www.youtube.com/embed/hLyG5h6LuCE'
title='YouTube video player' frameborder='0' allow='accelerometer; autoplay;
clipboard-write; encrypted-media; gyroscope; picture-in-picture'
allowfullscreen></iframe>
<b> Miembros:</b>
<h5> &#9658 <a href='https://www.linkedin.com/in/germ%C3%A1n-alonso-pati%C3%B1o-hurtado-828783241/' target='_blank'>
<i class='fab fa-linkedin' role='presentation' aria-label='linkedin icon'></i>
Germán Patiño
</a> Estudiante de Estadística en la Universidad Nacional de Colombia.<h5/>
<h5> &#9658 David Andres Cano Gonzalez Estudiante de ingenieria en sistemas en la Universidad Nacional de Colombia. <h5/>
<h5> &#9658 David Garcia Blandon Estudiante de ingenieria en sistemas en la Universidad Nacional de Colombia. <h5/>
<h5> &#9658 <a href='https://www.linkedin.com/in/juan-pablo-buitrago-diaz-5b960922b/' target='_blank'>
<i class='fab fa-linkedin' role='presentation' aria-label='linkedin icon'></i>
Juan Pablo Buitrago Diaz
</a> Estudiante de ingenieria en sistemas en la Universidad Nacional de Colombia. <h5/>
")
})
# mapa university
output$map_plot <- renderTmap({
#
#   filtro<-is.element(datos_geo$CLUSTER,  input$cluster) | is.null(input$cluster)
#
#   filtro2<-is.element(datos_geo$st_fips, input$estado ) | is.null(input$estado)
#   #    tmap_mode('view') %>%
#   tm_shape(shp = datos_geo[filtro & filtro2,])+ # coordenadas lat long
#     tm_dots(size = 0.05,col = "CLUSTER",popup.vars=c('address',var_numeric,var_cat)) })
# values<-reactiveValues(universidad=c(), url_1=c(),url_2=c())
# output$map_plot_state <- renderTmap({
#   tm_shape(mapa_usa )+
#     tm_polygons('Cluster_top',popup.vars= c("mean_TUITFTE" ,
#                                             "mean_INEXPFTE", "Cluster_1","Cluster_2","Cluster_3","Cluster_4"))
}
)
observeEvent(input$map_plot_marker_click,{
click_<-input$map_plot_marker_click
# filtro<-paste('X',datos$OPEID,sep='')==click_$id
# uni_click<-datos[filtro,c('address','INSTURL')]
# filtro<-!is.element(values$universidad,uni_click[1]$address)
# values$universidad<-c(values$universidad[filtro], uni_click[1]$address)
# values$url_1<-c(values$url_1[filtro], uni_click[2]$INSTURL)
#
# print(values$universidad)
# output$urls<- renderUI({
#
#   contar<-3
#   n_<-length(values$universidad)
#   text_<-list(tags$b('Show last 6 university.'),tags$br())
#   indice<-n_
#   while(indice>0 & n_-indice<7  ){
#     text_[[contar]]<-tags$b( values$universidad[indice])
#     text_[[contar+1]]<-HTML(values$url_1[indice])
#     contar<-contar+2
#     indice<-indice-1
#   }
#   print(text_)
#   tagList(text_)
# })
})
#,escape=1)
output$serie_plot<- renderPlotly({
plot_ly() %>%
add_lines(x=prediccion[,'FECHA_ACCIDENTE'], y=datos[,"Y"],
color=datos[,'CLASE_ACCIDENTE']  ) %>%
layout(xaxis=list(title= 'Fecha del Accidente.' ),
yaxis=list(title= "Número de accidentes en Medellín." ),
legend=list(title=list(text='Tipo de accidente.')))
})
}
shinyApp(
ui = usuario,
server = servidor
)
library(DT) # print table beutefull
library(sf) # manupulación geolocalizaciones
library(tmap)  # graficos interactivos de mapas
library(dplyr) # manejo de funciones
library(shiny) # aplicacion
library(plotly) # graficos
library(shinydashboard)
library(tidyverse)
library(shinycssloaders)# to add a loader while graph is populating
url_github<-"https://github.com/Germanchelo13/prediccion-de-incidentes-viales-medellin.git"
prediccion<-read.csv("datos_pronostico_2021_2022.csv")
prediccion$FECHA_ACCIDENTE_ <-(as.POSIXct(prediccion$FECHA_ACCIDENTE, format="%Y-%m-%d", tz="UTC"))
usuario<- fluidPage(
dashboardPage(
# header princial
dashboardHeader(title="Accidentes Medellín",
# titleWidth = 400,
tags$li(class="dropdown",
tags$a(href=url_github,
icon("github"),
"Source Code",
target="_blank"))),
# left
dashboardSidebar(
sidebarMenu(id="sidebar",
fluidRow(style='height:5vh'),
menuItem("Problematica", tabName="intro", icon=icon("users")),
menuItem(text= "Accidentes 2021 2022",tabName = "series",icon = icon("chart-line")),
menuItem(text= "Accidentes Barrios",tabName = "map",icon = icon("earth-americas"))
)  ),
# itmes
dashboardBody(tabItems (
# mapa
tabItem(tabName="map",
tabBox(id="t3",width= 12,
# puntos universidades
tabPanel(title="Información por barrio",
icon=icon('map'),
fluidPage(
fluidRow( uiOutput("text_geo") ),
fluidRow(column(6,
selectInput(inputId ="cluster" ,label= "Seleccione el cluster",
choices =c("Grupo 1","Grupo 2"),multiple = TRUE)),
column(6, selectInput(inputId ="estado" ,label= "Seleccione una Variable",
choices =c("Accidentes 2019", "Accidentes 2020"),multiple = TRUE) ) )
))
)),
tabItem(tabName = 'series',
tabBox(id='t3',width= 12,tabPanel(
HTML('<i class="fa-duotone fa-chart-scatter"></i>Numeric'),icon=icon('chart-line'),
fluidPage( fluidRow( br(),
selectInput(inputId ="var_numeric"
, label = "Select variable"
, choices =c("1","2") ),
uiOutput('descripcion_numerica'),
plotlyOutput('serie_plot'), br(),br()
)
)
)
)),
# item descripcion
tabItem(tabName = 'intro',fluidRow(style='height:5vh'),
tabBox(id='t3',width=12,tabPanel(HTML('<i class="fa-solid fa-book"></i> Contexto'),
fluidPage(
fluidRow(uiOutput('intro_'))
))) )
)
)
)
)
servidor<-function(input, output) {
output$text_geo<-renderUI({
"Se cuenta con 320 barrios en la ciudad de Medellín,
selecciona variables y cluster que te interesen." })
output$intro_<-renderUI({
HTML("
<br><h2>Accidentes viales en Medellín</h6>
</br>
¿Se ha preguntado como es el comportamiento de los accidentes en la ciudad de Medellín?
En esta aplicación puede interactuar con la información desde el año 2015 y 2022,
también puedes analizar la información por barrio.
<iframe width='560' height='315' src='https://www.youtube.com/embed/hLyG5h6LuCE'
title='YouTube video player' frameborder='0' allow='accelerometer; autoplay;
clipboard-write; encrypted-media; gyroscope; picture-in-picture'
allowfullscreen></iframe>
<b> Miembros:</b>
<h5> &#9658 <a href='https://www.linkedin.com/in/germ%C3%A1n-alonso-pati%C3%B1o-hurtado-828783241/' target='_blank'>
<i class='fab fa-linkedin' role='presentation' aria-label='linkedin icon'></i>
Germán Patiño
</a> Estudiante de Estadística en la Universidad Nacional de Colombia.<h5/>
<h5> &#9658 David Andres Cano Gonzalez Estudiante de ingenieria en sistemas en la Universidad Nacional de Colombia. <h5/>
<h5> &#9658 David Garcia Blandon Estudiante de ingenieria en sistemas en la Universidad Nacional de Colombia. <h5/>
<h5> &#9658 <a href='https://www.linkedin.com/in/juan-pablo-buitrago-diaz-5b960922b/' target='_blank'>
<i class='fab fa-linkedin' role='presentation' aria-label='linkedin icon'></i>
Juan Pablo Buitrago Diaz
</a> Estudiante de ingenieria en sistemas en la Universidad Nacional de Colombia. <h5/>
")
})
# mapa university
output$map_plot <- renderTmap({
#
#   filtro<-is.element(datos_geo$CLUSTER,  input$cluster) | is.null(input$cluster)
#
#   filtro2<-is.element(datos_geo$st_fips, input$estado ) | is.null(input$estado)
#   #    tmap_mode('view') %>%
#   tm_shape(shp = datos_geo[filtro & filtro2,])+ # coordenadas lat long
#     tm_dots(size = 0.05,col = "CLUSTER",popup.vars=c('address',var_numeric,var_cat)) })
# values<-reactiveValues(universidad=c(), url_1=c(),url_2=c())
# output$map_plot_state <- renderTmap({
#   tm_shape(mapa_usa )+
#     tm_polygons('Cluster_top',popup.vars= c("mean_TUITFTE" ,
#                                             "mean_INEXPFTE", "Cluster_1","Cluster_2","Cluster_3","Cluster_4"))
}
)
observeEvent(input$map_plot_marker_click,{
click_<-input$map_plot_marker_click
# filtro<-paste('X',datos$OPEID,sep='')==click_$id
# uni_click<-datos[filtro,c('address','INSTURL')]
# filtro<-!is.element(values$universidad,uni_click[1]$address)
# values$universidad<-c(values$universidad[filtro], uni_click[1]$address)
# values$url_1<-c(values$url_1[filtro], uni_click[2]$INSTURL)
#
# print(values$universidad)
# output$urls<- renderUI({
#
#   contar<-3
#   n_<-length(values$universidad)
#   text_<-list(tags$b('Show last 6 university.'),tags$br())
#   indice<-n_
#   while(indice>0 & n_-indice<7  ){
#     text_[[contar]]<-tags$b( values$universidad[indice])
#     text_[[contar+1]]<-HTML(values$url_1[indice])
#     contar<-contar+2
#     indice<-indice-1
#   }
#   print(text_)
#   tagList(text_)
# })
})
#,escape=1)
output$serie_plot<- renderPlotly({
plot_ly() %>%
add_lines(x=prediccion[,'FECHA_ACCIDENTE'], y=prediccion[,"Y"],
color=prediccion[,'CLASE_ACCIDENTE']  ) %>%
layout(xaxis=list(title= 'Fecha del Accidente.' ),
yaxis=list(title= "Número de accidentes en Medellín." ),
legend=list(title=list(text='Tipo de accidente.')))
})
}
shinyApp(
ui = usuario,
server = servidor
)
library(DT) # print table beutefull
library(sf) # manupulación geolocalizaciones
library(tmap)  # graficos interactivos de mapas
library(dplyr) # manejo de funciones
library(shiny) # aplicacion
library(plotly) # graficos
library(shinydashboard)
library(tidyverse)
library(shinycssloaders)# to add a loader while graph is populating
url_github<-"https://github.com/Germanchelo13/prediccion-de-incidentes-viales-medellin.git"
prediccion<-read.csv("datos_pronostico_2021_2022.csv")
prediccion$FECHA_ACCIDENTE_ <-(as.POSIXct(prediccion$FECHA_ACCIDENTE, format="%Y-%m-%d", tz="UTC"))
usuario<- fluidPage(
dashboardPage(
# header princial
dashboardHeader(title="Accidentes Medellín",
# titleWidth = 400,
tags$li(class="dropdown",
tags$a(href=url_github,
icon("github"),
"Source Code",
target="_blank"))),
# left
dashboardSidebar(
sidebarMenu(id="sidebar",
fluidRow(style='height:5vh'),
menuItem("Problematica", tabName="intro", icon=icon("users")),
menuItem(text= "Accidentes 2021 2022",tabName = "series",icon = icon("chart-line")),
menuItem(text= "Accidentes Barrios",tabName = "map",icon = icon("earth-americas"))
)  ),
# itmes
dashboardBody(tabItems (
# mapa
tabItem(tabName="map",
tabBox(id="t3",width= 12,
# puntos universidades
tabPanel(title="Información por barrio",
icon=icon('map'),
fluidPage(
fluidRow( uiOutput("text_geo") ),
fluidRow(column(6,
selectInput(inputId ="cluster" ,label= "Seleccione el cluster",
choices =c("Grupo 1","Grupo 2"),multiple = TRUE)),
column(6, selectInput(inputId ="estado" ,label= "Seleccione una Variable",
choices =c("Accidentes 2019", "Accidentes 2020"),multiple = TRUE) ) )
))
)),
tabItem(tabName = 'series',
tabBox(id='t3',width= 12,tabPanel(
HTML('<i class="fa-duotone fa-chart-scatter"></i>Numeric'),icon=icon('chart-line'),
fluidPage( fluidRow( br(),
sliderInput("slider_datetime", "Seleccione una fecha:",
min=as.POSIXlt("2010-01-01 00:00:00", "GMT"),
max=as.POSIXlt("2020-01-01 23:59:59", "GMT"),
value=as.POSIXlt("2010-01-01 00:00:00", "GMT"),
timezone = "GMT"),
uiOutput('descripcion_numerica'),
plotlyOutput('serie_plot'), br(),br()
)
)
)
)),
# item descripcion
tabItem(tabName = 'intro',fluidRow(style='height:5vh'),
tabBox(id='t3',width=12,tabPanel(HTML('<i class="fa-solid fa-book"></i> Contexto'),
fluidPage(
fluidRow(uiOutput('intro_'))
))) )
)
)
)
)
servidor<-function(input, output) {
output$text_geo<-renderUI({
"Se cuenta con 320 barrios en la ciudad de Medellín,
selecciona variables y cluster que te interesen." })
output$intro_<-renderUI({
HTML("
<br><h2>Accidentes viales en Medellín</h6>
</br>
¿Se ha preguntado como es el comportamiento de los accidentes en la ciudad de Medellín?
En esta aplicación puede interactuar con la información desde el año 2015 y 2022,
también puedes analizar la información por barrio.
<iframe width='560' height='315' src='https://www.youtube.com/embed/hLyG5h6LuCE'
title='YouTube video player' frameborder='0' allow='accelerometer; autoplay;
clipboard-write; encrypted-media; gyroscope; picture-in-picture'
allowfullscreen></iframe>
<b> Miembros:</b>
<h5> &#9658 <a href='https://www.linkedin.com/in/germ%C3%A1n-alonso-pati%C3%B1o-hurtado-828783241/' target='_blank'>
<i class='fab fa-linkedin' role='presentation' aria-label='linkedin icon'></i>
Germán Patiño
</a> Estudiante de Estadística en la Universidad Nacional de Colombia.<h5/>
<h5> &#9658 David Andres Cano Gonzalez Estudiante de ingenieria en sistemas en la Universidad Nacional de Colombia. <h5/>
<h5> &#9658 David Garcia Blandon Estudiante de ingenieria en sistemas en la Universidad Nacional de Colombia. <h5/>
<h5> &#9658 <a href='https://www.linkedin.com/in/juan-pablo-buitrago-diaz-5b960922b/' target='_blank'>
<i class='fab fa-linkedin' role='presentation' aria-label='linkedin icon'></i>
Juan Pablo Buitrago Diaz
</a> Estudiante de ingenieria en sistemas en la Universidad Nacional de Colombia. <h5/>
")
})
# mapa university
output$map_plot <- renderTmap({
#
#   filtro<-is.element(datos_geo$CLUSTER,  input$cluster) | is.null(input$cluster)
#
#   filtro2<-is.element(datos_geo$st_fips, input$estado ) | is.null(input$estado)
#   #    tmap_mode('view') %>%
#   tm_shape(shp = datos_geo[filtro & filtro2,])+ # coordenadas lat long
#     tm_dots(size = 0.05,col = "CLUSTER",popup.vars=c('address',var_numeric,var_cat)) })
# values<-reactiveValues(universidad=c(), url_1=c(),url_2=c())
# output$map_plot_state <- renderTmap({
#   tm_shape(mapa_usa )+
#     tm_polygons('Cluster_top',popup.vars= c("mean_TUITFTE" ,
#                                             "mean_INEXPFTE", "Cluster_1","Cluster_2","Cluster_3","Cluster_4"))
}
)
observeEvent(input$map_plot_marker_click,{
click_<-input$map_plot_marker_click
# filtro<-paste('X',datos$OPEID,sep='')==click_$id
# uni_click<-datos[filtro,c('address','INSTURL')]
# filtro<-!is.element(values$universidad,uni_click[1]$address)
# values$universidad<-c(values$universidad[filtro], uni_click[1]$address)
# values$url_1<-c(values$url_1[filtro], uni_click[2]$INSTURL)
#
# print(values$universidad)
# output$urls<- renderUI({
#
#   contar<-3
#   n_<-length(values$universidad)
#   text_<-list(tags$b('Show last 6 university.'),tags$br())
#   indice<-n_
#   while(indice>0 & n_-indice<7  ){
#     text_[[contar]]<-tags$b( values$universidad[indice])
#     text_[[contar+1]]<-HTML(values$url_1[indice])
#     contar<-contar+2
#     indice<-indice-1
#   }
#   print(text_)
#   tagList(text_)
# })
})
#,escape=1)
output$serie_plot<- renderPlotly({
plot_ly() %>%
add_lines(x=prediccion[,'FECHA_ACCIDENTE'], y=prediccion[,"Y"],
color=prediccion[,'CLASE_ACCIDENTE']  ) %>%
layout(xaxis=list(title= 'Fecha del Accidente.' ),
yaxis=list(title= "Número de accidentes en Medellín." ),
legend=list(title=list(text='Tipo de accidente.')))
})
}
shinyApp(
ui = usuario,
server = servidor
)
library(DateTimeRangePicker)
install.packages("DateTimeRangePicker")
install.packages("DateTimeRangePicker")
install.packages("daterangepicker")
library(DateTimeRangePicker)
library(daterangepicker)
library(daterangepicker)
library(daterangepicker)
library(shiny)
ui <- fluidPage(
br(),
sidebarLayout(
sidebarPanel(
width = 5,
tags$fieldset(
tags$legend("Click to change time"),
dtrpickerInput(
"dtrpicker",
style = paste0(
"background-color: chartreuse; ",
"box-shadow: 0 30px 40px 0 rgba(16, 36, 94, 0.2);"
)
)
)
),
mainPanel(
width = 7,
verbatimTextOutput("dtrpicker")
)
)
)
library(daterangepicker)
# daterangepicker::daterangepicker()
library(shiny)
# dtrpickerInput
ui <- fluidPage(
br(),
sidebarLayout(
sidebarPanel(
width = 5,
tags$fieldset(
tags$legend("Click to change time"),
daterangepicker::daterangepicker(
"dtrpicker",
style = paste0(
"background-color: chartreuse; ",
"box-shadow: 0 30px 40px 0 rgba(16, 36, 94, 0.2);"
)
)
)
),
mainPanel(
width = 7,
verbatimTextOutput("dtrpicker")
)
)
)
server <- function(input, output){
output[["dtrpicker"]] <- renderPrint({
input[["dtrpicker"]]
})
}
shinyApp(ui, server)
?daterangepicker::daterangepicker
runApp()
runApp()
runApp()
prediccion[,'FECHA_ACCIDENTE_']
prediccion[,'FECHA_ACCIDENTE_']>"2014-01-07 19:00:00 -05"
prediccion[,'FECHA_ACCIDENTE_']>"2015-01-07 19:00:00 -05"
prediccion[,'FECHA_ACCIDENTE_']>"2015-01-07"
runApp()
prediccion[,'FECHA_ACCIDENTE_']>='2014-01-16'
runApp()
runApp()
runApp()
