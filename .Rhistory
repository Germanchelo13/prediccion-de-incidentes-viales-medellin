#     geom_sf(aes(fill = get(input$estado) ))+
#     # theme(legend.title = input$estado)+
#     labs(fill=input$estado),text=~descripcion
#
# )
# fig<-plot_mapbox(mapa_medellin_temp, split=~CLUSTER)
leaflet(mapa_medellin)%>% addTiles() %>% addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
?addPolygons
# fig <- ggplotly(
#   ggplot(mapa_medellin_temp) +
#     geom_sf(aes(fill = get(input$estado) ))+
#     # theme(legend.title = input$estado)+
#     labs(fill=input$estado),text=~descripcion
#
# )
# fig<-plot_mapbox(mapa_medellin_temp, split=~CLUSTER)
leaflet(mapa_medellin)%>% addTiles() %>%
addPolygons(group =CLUSTER)
# fig <- ggplotly(
#   ggplot(mapa_medellin_temp) +
#     geom_sf(aes(fill = get(input$estado) ))+
#     # theme(legend.title = input$estado)+
#     labs(fill=input$estado),text=~descripcion
#
# )
# fig<-plot_mapbox(mapa_medellin_temp, split=~CLUSTER)
leaflet(mapa_medellin)%>% addTiles() %>%
addPolygons(group =~CLUSTER)
?addPolygons
# fig <- ggplotly(
#   ggplot(mapa_medellin_temp) +
#     geom_sf(aes(fill = get(input$estado) ))+
#     # theme(legend.title = input$estado)+
#     labs(fill=input$estado),text=~descripcion
#
# )
# fig<-plot_mapbox(mapa_medellin_temp, split=~CLUSTER)
leaflet(mapa_medellin)%>% addTiles() %>%
addPolygons(color =~CLUSTER)
# fig <- ggplotly(
#   ggplot(mapa_medellin_temp) +
#     geom_sf(aes(fill = get(input$estado) ))+
#     # theme(legend.title = input$estado)+
#     labs(fill=input$estado),text=~descripcion
#
# )
# fig<-plot_mapbox(mapa_medellin_temp, split=~CLUSTER)
pal <- colorFactor(
palette = 'Dark2',
domain = mapa_medellin$CLUSTER
)
leaflet(mapa_medellin)%>% addTiles() %>%
addPolygons(color =~pal)
leaflet(mapa_medellin)%>% addTiles() %>%
addPolygons(fillColor =  =~CLUSTER)
leaflet(mapa_medellin)%>% addTiles() %>%
addPolygons(fillColor  =~CLUSTER)
runApp()
?labs
?geom_sf
runApp()
?style()
runApp()
?add_trace()
runApp()
fig<- plot_geo()%>%
add_trace(data=mapa_medellin,
z = ~CLUSTER, text = mapa_medellin$descripcion#, span = I(0),
# locations = state.abb, locationmode = 'USA-states'
)
fig
fig<- plot_geo()%>%
add_trace(data=mapa_medellin,
z = ~CLUSTER, text = mapa_medellin$descripcion,#, span = I(0),
# locations = ,
locationmode = 'geometry'
)
# )
# leaflet(mapa_medellin)%>% addTiles() %>%
#   addPolygons(fillColor  =~CLUSTER)
# ?leaflet()
# leaflet(data = mapa_medellin_temp) # %>%
#   # addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
# # fig<-plotly::plot_geo(mapa_medellin_temp,z=~ACCIDENTES_1000KM2_2015,color=~ACCIDENTES_1000KM2_2015)
# #   # add_trace(
# #   #   data = mapa_medellin_temp,locations=mapa_medellin_temp$geometry,  text = ~descripcion
# #   # )
fig
fig<- plot_geo()%>%
add_trace(data=mapa_medellin,
text = mapa_medellin$descripcion,#, span = I(0),
# locations = ,
locationmode = 'geometry'
)
fig
# fig <- ggplotly(
#   ggplot(mapa_medellin_temp) +
#     geom_sf(aes(fill = get(input$estado) ))+
#     labs(fill=input$estado))
# fig<-fig %>%
#   add_trace()
p <- ggplot(mapa_medellin) + geom_sf(aes(fill = CLUSTER))
ggplotly(p) %>%
highlight(
"plotly_hover",
selected = attrs_selected(line = list(color = "black"))
) %>%
widgetframe::frameWidget()
# fig <- ggplotly(
#   ggplot(mapa_medellin_temp) +
#     geom_sf(aes(fill = get(input$estado) ))+
#     labs(fill=input$estado))
# fig<-fig %>%
#   add_trace()
p <- ggplot(mapa_medellin) + geom_sf(aes(fill = ACCIDENTES_1000KM2_2015))
ggplotly(p) %>%
highlight(
"plotly_hover",
selected = attrs_selected(line = list(color = "black"))
) %>%
widgetframe::frameWidget()
?highlight
ggplotly(p) %>%
highlight(
# "plotly_hover",
selected = attrs_selected(line = list(color = "black"))
) %>%
widgetframe::frameWidget()
ggplotly(p) %>%
highlight(
hover=descripcion,
# "plotly_hover",
selected = attrs_selected(line = list(color = "black"))
) %>%
widgetframe::frameWidget()
ggplotly(p) %>%
highlight(
hover=mapa_medellin$descripcion,
# "plotly_hover",
selected = attrs_selected(line = list(color = "black"))
) %>%
widgetframe::frameWidget()
ggplotly(p) %>%
highlight(
hoverinfo=mapa_medellin$descripcion,
# "plotly_hover",
selected = attrs_selected(line = list(color = "black"))
) %>%
widgetframe::frameWidget()
# fig <- ggplotly(
#   ggplot(mapa_medellin_temp) +
#     geom_sf(aes(fill = get(input$estado) ))+
#     labs(fill=input$estado))
# fig<-fig %>%
#   add_trace()
p <- ggplot(mapa_medellin) + geom_sf(aes(fill = ACCIDENTES_1000KM2_2015))
ggplotly(p) %>%
highlight(
hoverinfo=mapa_medellin$CLUSTER,
# "plotly_hover",
selected = attrs_selected(line = list(color = "black"))
) %>%
widgetframe::frameWidget()
library(rbokeh)
install.packages("rbokeh")
# fig <- ggplotly(
#   ggplot(mapa_medellin_temp) +
#     geom_sf(aes(fill = get(input$estado) ))+
#     labs(fill=input$estado))
# fig<-fig %>%
#   add_trace()
?rbokeh::ly_map()
# fig <- ggplotly(
#   ggplot(mapa_medellin_temp) +
#     geom_sf(aes(fill = get(input$estado) ))+
#     labs(fill=input$estado))
# fig<-fig %>%
#   add_trace()
rbokeh::ly_map(mapa_medellin)
# fig <- ggplotly(
#   ggplot(mapa_medellin_temp) +
#     geom_sf(aes(fill = get(input$estado) ))+
#     labs(fill=input$estado))
# fig<-fig %>%
#   add_trace()
plot <- suppressWarnings(figure(width = 800, height = 450, padding_factor = 0) %>%
rbokeh::ly_map(mapa_medellin)
p <- ggplot(mapa_medellin) + geom_sf(aes(fill = ACCIDENTES_1000KM2_2015))
# fig <- ggplotly(
#   ggplot(mapa_medellin_temp) +
#     geom_sf(aes(fill = get(input$estado) ))+
#     labs(fill=input$estado))
# fig<-fig %>%
#   add_trace()
plot <- figure(width = 800, height = 450, padding_factor = 0) %>%
rbokeh::ly_map(mapa_medellin)
# fig <- ggplotly(
#   ggplot(mapa_medellin_temp) +
#     geom_sf(aes(fill = get(input$estado) ))+
#     labs(fill=input$estado))
# fig<-fig %>%
#   add_trace()
plot <- rbokeh::figure(width = 800, height = 450, padding_factor = 0) %>%
rbokeh::ly_map(mapa_medellin)
# fig <- ggplotly(
#   ggplot(mapa_medellin_temp) +
#     geom_sf(aes(fill = get(input$estado) ))+
#     labs(fill=input$estado))
# fig<-fig %>%
#   add_trace()
plot <- rbokeh::figure(width = 800, height = 450, padding_factor = 0) %>%
rbokeh::ly_map(mapa_medellin) %>%
rbokeh::ly_polygons()
# fig <- ggplotly(
#   ggplot(mapa_medellin_temp) +
#     geom_sf(aes(fill = get(input$estado) ))+
#     labs(fill=input$estado))
# fig<-fig %>%
#   add_trace()
plot <- rbokeh::figure(width = 800, height = 450, padding_factor = 0) %>%
rbokeh::ly_polygons(mapa_medellin)
mapa_medellin$geometry[1]
mapa_medellin$geometry$lat
mapa_medellin$geometry
mapa_medellin$geometry$X
mapa_medellin$geometry
library(mapview)
install.packages("mapview")
mapview(mapa_medellin, legend = FALSE)
library(mapview)
mapview(mapa_medellin, legend = FALSE)
mapview(mapa_medellin)
?mapview
mapview(mapa_medellin)
mapview(mapa_medellin,fillcolor=CLUSTER)
mapview(mapa_medellin,fillcolor=mapa_medellin$CLUSTER)
mapview(mapa_medellin,fill=mapa_medellin$CLUSTER)
mapview(mapa_medellin,color=mapa_medellin$CLUSTER)
mapview(mapa_medellin,fillcolor=mapa_medellin$CLUSTER)
mapview(mapa_medellin,zcol=mapa_medellin$CLUSTER)
mapview(mapa_medellin,zcol="CLUSTER")
?mapview
mapview(mapa_medellin,zcol="CLUSTER",hoverinfo="descripcion")
mapview(mapa_medellin,zcol="CLUSTER",hover="descripcion")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mapa_medellin$CLUSTER
mapview(mapa_medellin[mapa_medellin$CLUSTER=="Grado moderado"] ,zcol="CLUSTER")@map
mapview(mapa_medellin[mapa_medellin$CLUSTER=="Grado moderado",] ,zcol="CLUSTER")@map
names(mapa_medellin)
mapview(mapa_medellin[mapa_medellin$CLUSTER=="Grado moderado",] ,zcol="MUERTES_2016")@map
runApp()
runApp()
?mapview()
runApp()
shiny::runApp()
runApp()
library(mapview)
# library(tmap)  # graficos interactivos de mapas
library(leaflet)
library(plotly) # graficos
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(sf) # manupulación geolocalizaciones
# library(mapview)
# # library(tmap)  # graficos interactivos de mapas
# library(leaflet)
library(dplyr) # manejo de funciones
library(ggrepel)
library(shiny) # aplicacion
library(plotly) # graficos
library(shinydashboard)
library(daterangepicker)
library(tidyverse)
library(rjson)
library(shinycssloaders)# to add a loader while graph is populating
url_github<-"https://github.com/Germanchelo13/prediccion-de-incidentes-viales-medellin.git"
# url <- 'https://raw.githubusercontent.com/plotly/datasets/master/election.geojson'
# geojson <- rjson::fromJSON(file=url)
mapa_medellin<-st_read('barrios_cluster.shp')
prediccion<-read.csv("datos_pronostico_2021_2022.csv")
prediccion$FECHA_ACCIDENTE_ <-(as.POSIXct(prediccion$FECHA_ACCIDENTE, format="%Y-%m-%d", tz="UTC"))
var_clusters<-c("CLUSTER",'ACCIDENTES_1000KM2_2015', 'ACCIDENTES_1000KM2_2016',
'ACCIDENTES_1000KM2_2017', 'ACCIDENTES_1000KM2_2018',
'ACCIDENTES_1000KM2_2019', 'MUERTES_2015', 'MUERTES_2016',
'MUERTES_2017', 'MUERTES_2018', 'MUERTES_2019')
names(mapa_medellin)<-c('BARRIO', 'SHAPEAREA', 'SHAPELEN',
'ACCIDENTES_1000KM2_2015', 'ACCIDENTES_1000KM2_2016',
'ACCIDENTES_1000KM2_2017', 'ACCIDENTES_1000KM2_2018',
'ACCIDENTES_1000KM2_2019', 'MUERTES_2015', 'MUERTES_2016',
'MUERTES_2017', 'MUERTES_2018', 'MUERTES_2019', 'CLUSTER','geometry'
)
for (var_ in var_clusters[-1]){
mapa_medellin$get(var_)<-round(mapa_medellin$get(var_), 3)
}
mapa_medellin$descripcion<-paste(
"Barrio: ", mapa_medellin$BARRIO,
"<br>  Accidentes por 1000 km2  ",
"<br> Año 2015: ",round(mapa_medellin$ACCIDENTES_1000KM2_2015,3),
"<br>  Año 2016: ", round(mapa_medellin$ACCIDENTES_1000KM2_2016,3),
"<br>  Año 2017: ", round(mapa_medellin$ACCIDENTES_1000KM2_2017,3),
"<br>  Año 2018: ", round(mapa_medellin$ACCIDENTES_1000KM2_2018,3),
"<br> Año  2019: ", round(mapa_medellin$ACCIDENTES_1000KM2_2019,3),
"<br> Muertes     ",
"<br> Año 2015:  ",round(mapa_medellin$MUERTES_2015,3),
"<br> Año 2016: ", round(mapa_medellin$MUERTES_2016,3),
"<br> Año 2017: ", round(mapa_medellin$MUERTES_2017,3),
"<br> Año 2018: ", round(mapa_medellin$MUERTES_2018,3),
"<br> Año 2019: ", round(mapa_medellin$MUERTES_2019,3),
sep=""
)
runApp()
library(sf) # manupulación geolocalizaciones
# library(mapview)
# # library(tmap)  # graficos interactivos de mapas
# library(leaflet)
library(dplyr) # manejo de funciones
library(ggrepel)
library(shiny) # aplicacion
library(plotly) # graficos
library(shinydashboard)
library(daterangepicker)
library(tidyverse)
library(rjson)
library(shinycssloaders)# to add a loader while graph is populating
url_github<-"https://github.com/Germanchelo13/prediccion-de-incidentes-viales-medellin.git"
# url <- 'https://raw.githubusercontent.com/plotly/datasets/master/election.geojson'
# geojson <- rjson::fromJSON(file=url)
mapa_medellin<-st_read('barrios_cluster.shp')
prediccion<-read.csv("datos_pronostico_2021_2022.csv")
prediccion$FECHA_ACCIDENTE_ <-(as.POSIXct(prediccion$FECHA_ACCIDENTE, format="%Y-%m-%d", tz="UTC"))
var_clusters<-c("CLUSTER",'ACCIDENTES_1000KM2_2015', 'ACCIDENTES_1000KM2_2016',
'ACCIDENTES_1000KM2_2017', 'ACCIDENTES_1000KM2_2018',
'ACCIDENTES_1000KM2_2019', 'MUERTES_2015', 'MUERTES_2016',
'MUERTES_2017', 'MUERTES_2018', 'MUERTES_2019')
names(mapa_medellin)<-c('BARRIO', 'SHAPEAREA', 'SHAPELEN',
'ACCIDENTES_1000KM2_2015', 'ACCIDENTES_1000KM2_2016',
'ACCIDENTES_1000KM2_2017', 'ACCIDENTES_1000KM2_2018',
'ACCIDENTES_1000KM2_2019', 'MUERTES_2015', 'MUERTES_2016',
'MUERTES_2017', 'MUERTES_2018', 'MUERTES_2019', 'CLUSTER','geometry'
)
for (var_ in var_clusters[-1]){
mapa_medellin$get(var_)<-round(mapa_medellin$get(var_), 3)
}
mapa_medellin$get(var_)
mapa_medellin$(var_)<-round(mapa_medellin$get(var_), 3)
for (var_ in var_clusters[-1]){
mapa_medellin$(var_)<-round(mapa_medellin$get(var_), 3)
for (var_ in var_clusters[-1]){
mapa_medellin[,var_]<-round(mapa_medellin[,var_], 3)
}
var_
mapa_medellin[,var_]
for (var_ in var_clusters[-1]){
indice<-which(names(mapa_medellin), var_ )
mapa_medellin[,indice]<-round(mapa_medellin[,indice], 3)
}
for (var_ in var_clusters[-1]){
indice<-which(is.element(names(mapa_medellin), var_ ))
mapa_medellin[,indice]<-round(mapa_medellin[,indice], 3)
}
mapa_medellin[,indice]
mapa_medellin
mapa_medellin[,1]
mapa_medellin[,1][,1]
mapa_medellin[,1][1,1]
mapa_medellin$SHAPELEN
mapa_medellin[['SHAPELEN']]
for (var_ in var_clusters[-1]){
indice<-which(is.element(names(mapa_medellin), var_ ))
mapa_medellin[[var_]]<-round(mapa_medellin[[var_]], 3)
}
runApp()
runApp()
runApp()
?selectInput()
runApp()
runApp()
fig<- ggplot(mapa_medellin,aes(tooltip=BARRIO))+
# geom_text_repel(aes(label=descripcion), size=5)+
geom_sf(aes(fill="CLUSTER" ))
plotly::ggplotly( fig )
fig<-plotly::ggplotly( fig )
fig
fig<- ggplot(mapa_medellin,aes(tooltip=BARRIO))+
# geom_text_repel(aes(label=descripcion), size=5)+
geom_sf(aes(fill="CLUSTER" ),lwd=1)
fig<-plotly::ggplotly( fig )
fig
fig<- ggplot(mapa_medellin,aes(tooltip=BARRIO))+
# geom_text_repel(aes(label=descripcion), size=5)+
geom_sf(aes(fill="CLUSTER" ),lwd=0.5)
fig<-plotly::ggplotly( fig )
fig
fig<- ggplot(mapa_medellin,aes(tooltip=BARRIO))+
# geom_text_repel(aes(label=descripcion), size=5)+
geom_sf(aes(fill="CLUSTER" ),lwd=0.2)
fig<-plotly::ggplotly( fig )
fig
fig <- plot_ly()
fig <- fig %>% add_trace(
type="choropleth",
geojson=mapa_medellin,
locations=mapa_medellin$geometry,
z=mapa_medellin$CLUSTER,
colorscale="Viridis",
zmin=0,
zmax=12,
marker=list(line=list(
width=0)
)
)
fig <- fig %>% colorbar(title = "Unemployment Rate (%)")
fig <- fig %>% layout(
title = "2016 US Unemployment by County"
)
fig
fig <- plot_ly()
fig <- fig %>% add_trace(
# type="choropleth",
geojson=mapa_medellin,
locations=mapa_medellin$geometry,
z=mapa_medellin$CLUSTER,
colorscale="Viridis"
)
fig
fig <- plot_ly()
fig <- fig %>% add_trace(
type="choropleth",
geojson=mapa_medellin,
locations=mapa_medellin$geometry,
z=mapa_medellin$CLUSTER,
colorscale="Viridis"
)
fig
fig <- plot_ly()
fig <- fig %>% add_trace(
type="choropleth",
geojson=mapa_medellin,
locations=mapa_medellin$geometry,
z=mapa_medellin$CLUSTER,
colorscale="Viridis",
featureidkey="properties.district"
)
fig <- fig %>% layout(
geo = g
)
g <- list(
fitbounds = "locations",
visible = FALSE
)
fig <- plot_ly()
fig <- fig %>% add_trace(
type="choropleth",
geojson=mapa_medellin,
locations=mapa_medellin$geometry,
z=mapa_medellin$CLUSTER,
colorscale="Viridis",
featureidkey="properties.district"
)
fig <- fig %>% layout(
geo = g
)
fig <- fig %>% colorbar(title = "Bergeron Votes")
fig
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(kableExtra)
reticulate::repl_python()
datos=pd.read_csv("incidentes_viales.csv",sep=";")#,encoding='ansi',engine="python")
import pandas as pd
import pandas as pd
datos=pd.read_csv("incidentes_viales.csv",sep=";")#,encoding='ansi',engine="python")
datos["CLASE_ACCIDENTE"].value_counts(dropna=False)
datos=pd.read_csv("incidentes_viales.csv",sep=";")#,encoding='ansi',engine="python")
datos=pd.read_csv("incidentes_viales.csv",sep=";",encoding='ansi')#,engine="python")
datos=pd.read_csv("incidentes_viales.csv",sep=";")#,encoding='ansi')#,engine="python")
datos=pd.read_csv("incidentes_viales.csv",sep=";",encoding='utf8')#,engine="python")
datos=pd.read_csv("incidentes_viales.csv",sep=";",encoding='utf-8')#,engine="python")
datos=pd.read_csv("incidentes_viales.csv",sep=";",encoding='utf-16')#,engine="python")
datos["CLASE_ACCIDENTE"].value_counts(dropna=False)
datos=pd.read_csv("incidentes_viales.csv",sep=";",encoding='utf-16')#,engine="python")
datos=pd.read_csv("incidentes_viales.csv",sep=";",encoding='ansi')#,engine="python")
datos=pd.read_csv("incidentes_viales.csv",sep=";",encoding='ansi',engine="python")
datos=pd.read_csv("incidentes_viales.csv",sep=";")#,encoding='ansi',engine="python")
datos=pd.read_csv("incidentes_viales.csv",sep=",")#,encoding='ansi',engine="python")
datos["CLASE_ACCIDENTE"].value_counts(dropna=False)
